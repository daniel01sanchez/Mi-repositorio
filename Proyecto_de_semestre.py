import tkinter

ventana = tkinter.Tk()
ventana.title("Proyecto de Semestre")
ventana.geometry("1000x640")

def tipos_de_datos():
    tipos_de_datos = tkinter.Tk()
    tipos_de_datos.title("Tipos de Datos") 
    tipos_de_datos.geometry("545x230")
    
    types = tkinter.Label(tipos_de_datos, text = "Tipos de Datos", bg = "steelblue")
    types.pack(fill = tkinter.X, expand = True)
    text_types_1 = tkinter.Label(tipos_de_datos, text = "En python existen dos tipos de datos que son los simples y los compuestos", bg = "lightsteelblue")
    text_types_1.pack(fill = tkinter.X, expand = True)
    text_types_2 = tkinter.Label(tipos_de_datos, text = "En los simples encontramos los enteros; int, reales; float, booleanos; bool y los caracteres; char", bg = "lightsteelblue")
    text_types_2.pack(fill = tkinter.X, expand = True)
    text_types_3 = tkinter.Label(tipos_de_datos, text = "En los compuestos encontramos las tablas; arrays, las estructuras, las tuplas, las listas y los diccionarios", bg = "lightsteelblue")
    text_types_3.pack(fill = tkinter.X, expand = True)
    types_1 = tkinter.Label(tipos_de_datos, text = "Entero, int = 12", bg = "aliceblue")
    types_1.pack(fill = tkinter.X, expand = True)
    types_2 = tkinter.Label(tipos_de_datos, text = "Reales, float = 12363,1202", bg = "aliceblue")
    types_2.pack(fill = tkinter.X, expand = True)
    types_3 = tkinter.Label(tipos_de_datos, text = "Booleanos, bool = True or False", bg = "aliceblue")
    types_3.pack(fill = tkinter.X, expand = True)
    types_4 = tkinter.Label(tipos_de_datos, text = "Cadenas de Texto, str = 'Hola, mi nombre es Daniel'", bg = "aliceblue")
    types_4.pack(fill = tkinter.X, expand = True)
    types_5 = tkinter.Label(tipos_de_datos, text = "Listas, list = ['nombre', 12, 43.4]", bg = "aliceblue")
    types_5.pack(fill = tkinter.X, expand = True)
    types_6 = tkinter.Label(tipos_de_datos, text = "Diccionarios, dict = {'word: meaning'}", bg = "aliceblue")
    types_6.pack(fill = tkinter.X, expand = True)
    types_7 = tkinter.Label(tipos_de_datos, text = "Tuplas, tuple = (3, 'hogar', True)", bg = "aliceblue")
    types_7.pack(fill = tkinter.X, expand = True)

def comparaciones():
    comparaciones = tkinter.Tk()
    comparaciones.title("Comparaciones")
    comparaciones.geometry("525x220")
    
    comp = tkinter.Label(comparaciones, text = "Comparaciones en Python", bg = "steelblue")
    comp.pack(fill = tkinter.X, expand = True)
    comp_1 = tkinter.Label(comparaciones, text = "En python las comparaciones y los operadores lógicos se utilizan para comparar dos o más valores", bg = "lightsteelblue")
    comp_1.pack(fill = tkinter.X, expand = True)
    comp_1 = tkinter.Label(comparaciones, text = "Siempre el resultado de éstos operadores es booleano, es decir, True o False", bg = "lightsteelblue")
    comp_1.pack(fill = tkinter.X, expand = True)
    com_1 = tkinter.Label(comparaciones, text = "Operador               Descripción                                      ", bg = "steelblue")
    com_1.pack(fill = tkinter.X, expand = True)
    com_2 = tkinter.Label(comparaciones, text = "==                         Es igual a                                        ", bg = "aliceblue")
    com_2.pack(fill = tkinter.X, expand = True)
    com_3 = tkinter.Label(comparaciones, text = " !=                          Distinto                                           ", bg = "aliceblue")
    com_3.pack(fill = tkinter.X, expand = True)
    com_4 = tkinter.Label(comparaciones, text = "               <, <=, >, >                  Menor, menor o igual, mayor, mayor o igual", bg = "aliceblue")
    com_4.pack(fill = tkinter.X, expand = True)
    com_5 = tkinter.Label(comparaciones, text = "&&                         Operador and (y)                            ", bg = "aliceblue")
    com_5.pack(fill = tkinter.X, expand = True)
    com_6 = tkinter.Label(comparaciones, text = "||                            Operador or (o)                             ", bg = "aliceblue")
    com_6.pack(fill = tkinter.X, expand = True)
    com_7 = tkinter.Label(comparaciones, text = "   !                             Operador not (no)                           ", bg = "aliceblue")
    com_7.pack(fill = tkinter.X, expand = True)

def condicionales():
    condicionales = tkinter.Tk()
    condicionales.title("Condicionales")
    condicionales.geometry("500x505")
    
    cond = tkinter.Label(condicionales, text = "Condicionales en Python", bg = "steelblue")
    cond.pack(fill = tkinter.X, expand = True)
    cond_1 = tkinter.Label(condicionales, text = "Los condicionales en Python son sentencias que consisten en las siguientes partes pricipales:", bg = "lightsteelblue")
    cond_1.pack(fill = tkinter.X, expand = True)
    cond_2 = tkinter.Label(condicionales, text = "1. Una prueba que evalúa a verdadero o falso", bg = "lightsteelblue")
    cond_2.pack(fill = tkinter.X, expand = True)
    cond_3 = tkinter.Label(condicionales, text = "2. Un bloque de código que se ejecuta si la prueba es verdadera", bg = "lightsteelblue")
    cond_3.pack(fill = tkinter.X, expand = True)
    cond_4 = tkinter.Label(condicionales, text = "3. Un bloque opcional de código si la prueba es falsa", bg = "lightsteelblue")
    cond_4.pack(fill = tkinter.X, expand = True)
    con_1 = tkinter.Label(condicionales, text = "Tipos de Condicionales", bg = "steelblue")
    con_1.pack(fill = tkinter.X, expand = True)
    con_2 = tkinter.Label(condicionales, text = "Sentencia if", bg = "steelblue")
    con_2.pack(fill = tkinter.X, expand = True)
    con_3 = tkinter.Label(condicionales, text = "La sentencia condicional más básica de Python que se expresa de la siguiente forma:", bg = "aliceblue")
    con_3.pack(fill = tkinter.X, expand = True) 
    con_4 = tkinter.Label(condicionales, text = "if condicion:                     ", bg = "aliceblue")
    con_4.pack(fill = tkinter.X, expand = True)
    con_5 = tkinter.Label(condicionales, text = "                # ejecutar un código          ", bg = "aliceblue")
    con_5.pack(fill = tkinter.X, expand = True)
    
    con_6 = tkinter.Label(condicionales, text = "Sentencia else", bg = "steelblue")
    con_6.pack(fill = tkinter.X, expand = True)
    con_7 = tkinter.Label(condicionales, text = "Ésta sentencia contiene el código a ejecutar en caso de que no se cumpla la sentencia if:", bg = "aliceblue")
    con_7.pack(fill = tkinter.X, expand = True)
    con_8 = tkinter.Label(condicionales, text = "if condicion:                     ", bg = "aliceblue")
    con_8.pack(fill = tkinter.X, expand = True)
    con_9 = tkinter.Label(condicionales, text = "                # ejecutar un código          ", bg = "aliceblue")
    con_9.pack(fill = tkinter.X, expand = True)
    con_10 = tkinter.Label(condicionales, text = "else:                                     ", bg = "aliceblue")
    con_10.pack(fill = tkinter.X, expand = True)
    con_11 = tkinter.Label(condicionales, text = "                      # ejecutar un código distinto ", bg = "aliceblue")
    con_11.pack(fill = tkinter.X, expand = True)
    
    con_12 = tkinter.Label(condicionales, text = "Sentencia elif", bg = "steelblue")
    con_12.pack(fill = tkinter.X, expand = True)
    con_13 = tkinter.Label(condicionales, text = "Son condiciones que se pueden añadir a una sentencia if else un número indefinido de veces", bg = "aliceblue")
    con_13.pack(fill = tkinter.X, expand = True)
    con_14 = tkinter.Label(condicionales, text = "if condicion:                     ", bg = "aliceblue")
    con_14.pack(fill = tkinter.X, expand = True)
    con_15 = tkinter.Label(condicionales, text = "                # ejecutar un código          ", bg = "aliceblue")
    con_15.pack(fill = tkinter.X, expand = True)
    con_16 = tkinter.Label(condicionales, text = "   elif otra_condicion:              ", bg = "aliceblue")
    con_16.pack(fill = tkinter.X, expand = True)
    con_17 = tkinter.Label(condicionales, text = "                # ejecutar otro código        ", bg = "aliceblue")
    con_17.pack(fill = tkinter.X, expand = True)
    con_18 = tkinter.Label(condicionales, text = "else:                                     ", bg = "aliceblue")
    con_18.pack(fill = tkinter.X, expand = True)
    con_19 = tkinter.Label(condicionales, text = "                      # ejecutar un código distinto ", bg = "aliceblue")
    con_19.pack(fill = tkinter.X, expand = True)
    

def ciclos():
    ciclos = tkinter.Tk()
    ciclos.title("Ciclos")
    ciclos.geometry("580x400")
    
    cicl = tkinter.Label(ciclos, text = "Ciclos o Bucles en Python", bg = "steelblue")
    cicl.pack(fill = tkinter.X, expand = True)
    cic_1 = tkinter.Label(ciclos, text = "Un ciclo de Python nos permite repetir una o varias instrucciones cuantas veces queramos", bg = "lightsteelblue")
    cic_1.pack(fill = tkinter.X, expand = True)
    cic_2 = tkinter.Label(ciclos, text = "Existen dos tipos de ciclos o bucles en Python:", bg = "lightsteelblue")
    cic_2.pack(fill = tkinter.X, expand = True)
    cic_3 = tkinter.Label(ciclos, text = "Ciclo While en Python", bg = "steelblue")
    cic_3.pack(fill = tkinter.X, expand = True)
    cic_4 = tkinter.Label(ciclos, text = "Los ciclos while son una estructura cíclica, que permite ejecutar una o varias líneas de código repetitivamente", bg = "aliceblue")
    cic_4.pack(fill = tkinter.X, expand = True)
    cic_5 = tkinter.Label(ciclos, text = "while (condicion de finalización)    ", bg = "aliceblue")
    cic_5.pack(fill = tkinter.X, expand = True)
    cic_6 = tkinter.Label(ciclos, text = "          ...                                                     ", bg = "aliceblue")
    cic_6.pack(fill = tkinter.X, expand = True)
    cic_7 = tkinter.Label(ciclos, text = "          Bloque de instrucciones   ...        ", bg = "aliceblue")
    cic_7.pack(fill = tkinter.X, expand = True)
    cic_8 = tkinter.Label(ciclos, text = "         Dentro del while                          ", bg = "aliceblue")
    cic_8.pack(fill = tkinter.X, expand = True)
    cic_9 = tkinter.Label(ciclos, text = "          ...                                                     ", bg = "aliceblue")
    cic_9.pack(fill = tkinter.X, expand = True)
    cic_10 = tkinter.Label(ciclos, text = "Bloque de Instrucciones  ...              ", bg = "aliceblue")
    cic_10.pack(fill = tkinter.X, expand = True)
    cic_11 = tkinter.Label(ciclos, text = "Fuera del While                                  ", bg = "aliceblue")
    cic_11.pack(fill = tkinter.X, expand = True)
    
    cic_12 = tkinter.Label(ciclos, text = "Ciclo For en Python", bg = "steelblue")
    cic_12.pack(fill = tkinter.X, expand = True)
    cic_13 = tkinter.Label(ciclos, text = "Los ciclos for son estructuras cíclicas, sólo que se puede tener un mayor control de éstas repeticiones", bg = "aliceblue")
    cic_13.pack(fill = tkinter.X, expand = True)
    cic_14 = tkinter.Label(ciclos, text = "for variable_contadora in range(valor_inicial, valor_final, tamaño_paso:", bg = "aliceblue")
    cic_14.pack(fill = tkinter.X, expand = True)
    cic_15 = tkinter.Label(ciclos, text = "...                                                                                                      ", bg = "aliceblue")
    cic_15.pack(fill = tkinter.X, expand = True)
    cic_16 = tkinter.Label(ciclos, text = "Bloque de Instrucciones  ...                                                          ", bg = "aliceblue")
    cic_16.pack(fill = tkinter.X, expand = True)
    cic_17 = tkinter.Label(ciclos, text = "...                                                                                                      ", bg = "aliceblue")
    cic_17.pack(fill = tkinter.X, expand = True)
    cic_18 = tkinter.Label(ciclos, text = "Bloque fuera del ciclo for  ...                                                                          ", bg = "aliceblue")
    cic_18.pack(fill = tkinter.X, expand = True)
    

etiqueta = tkinter.Label(ventana, text = "Aprende a Programar Python Básico", bg = "steelblue", font = "Verdana 13")
etiqueta.pack(fill = tkinter.BOTH, expand = True)

img = tkinter.PhotoImage(file="pythoniloghio.png")
ibl_img = tkinter.Label(ventana, image = img, bg = "lightsteelblue")
ibl_img.pack(fill = tkinter.X, expand = True)

etiqueta_2 = tkinter.Label(ventana, text = "¿Qué quieres aprender hoy?", bg = "steelblue", font = "Helvetica")
etiqueta_2.pack(fill = tkinter.X, expand = True)

boton_1 = tkinter.Button(ventana, text = "Tipos de Datos", command = tipos_de_datos)
boton_1.pack(side = tkinter.BOTTOM)

boton_2 = tkinter.Button(ventana, text = "Comparaciones", command = comparaciones)
boton_2.pack(side = tkinter.BOTTOM)

boton_3 = tkinter.Button(ventana, text = "Condicionales", command = condicionales)
boton_3.pack(side = tkinter.BOTTOM)

boton_4 = tkinter.Button(ventana, text = "Ciclos o Bucles", command = ciclos)
boton_4.pack(side = tkinter.BOTTOM)
ventana.mainloop()
